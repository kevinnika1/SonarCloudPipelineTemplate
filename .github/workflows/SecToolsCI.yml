name: Python container CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

   SCA:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Run Checkov action client
        uses: bridgecrewio/checkov-action@master
        with:
          soft_fail: true # optional: do not return an error code if there are failed checks
          output_format: cli #this output allows for integration with github checks but can be changed to JSON or github_failed_only for different output formats
          #directory: example/
          #check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
          #skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          #quiet: true # optional: display only failed checks
          #framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          #download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          #log_level: DEBUG # optional: set log level. Default WARNING
          #config_file: path/this_file
          #baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.

   SAST:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@master
    
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # don't need to set this as a secret
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} #api token from sonarcloud
      with:
        args: >
          -Dsonar.organization= enterorgname-here 
          -Dsonar.projectKey=enter-project-key-here
          -Dsonar.verbose=true
        #  -Dsonar.python.coverage.reportPaths=coverage.xml #if you have unit tests can place the path of the xml here, can do more than python and you can find that in the sonarcloud documentaion. 
        #  -Dsonar.sources=lib/ 
        #  -Dsonar.test.exclusions=tests/** 
        #  -Dsonar.tests=tests/
      
      #this job would check if the lastest scan in sonarcloud has passed its quality gate could be useful when working on master branch to stop the pipeline if there is a sonar cloud error.
   # - name: SonarQube Quality Gate check 
   #   uses: sonarsource/sonarqube-quality-gate-action@master
   #   # Force to fail step after specific time
   #   timeout-minutes: 5
   #   env:
   #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
   
#this checks the issues identified in sonarcloud from your scans and outputs it onto the github checks/annotaions for easier viewing when SAST scan is done.
   SASTCheck:
    runs-on: ubuntu-latest
    needs: [SAST]
    steps:
      - name: test
        uses: kevinnika1/Sonarcloud-GithubChecks-action@v2
        with:
          org: 'enterorg' #enter your sonarcloud org here
          project-key: 'enterprojectkey' #enter your project key from sonarcloud here
          repo_token: ${{ secrets.GITHUB_TOKEN }} # no need to add this secret as its an environment variable

   ContainerVM:
    runs-on: ubuntu-latest
    needs: [SCA,SAST,SASTCheck]
    steps: 
      - name:  Checkout repo
        uses: actions/checkout@master

      - name: Build an image from Dockerfile
       #build image and give it a tag
        run: |
          docker build . --tag template-container:${{ github.sha }}
           
      - name: trivy scan with GitHub checks
        uses: kevinnika1/Trivy-GitHubChecks-Action@v0.2
        with:
          image-ref: 'template-container:${{ github.sha }}' #run a scan on the image you built in the previous step
          repo_token: ${{ secrets.GITHUB_TOKEN }}


   PushtoECR:
      runs-on: ubuntu-latest
      needs: [ContainerVM]
      name: Push to ECR

      steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: 1.0
        run: |
          # Build a docker container and push it to ECR 
          docker build . --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
  # CheckECR:
  #    runs-on: ubuntu-18.04
  #    needs: [PushtoECR]
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v2
  #        
  #      - name: Run Trivy vulnerability scanner
  #        uses: aquasecurity/trivy-action@master
  #        with:
  #          image-ref: 'aws_account_id.dkr.ecr.region.amazonaws.com/imageName:${{ github.sha }}'
  #          format: 'table'
  #          exit-code: '0'
  #          ignore-unfixed: true
  #          vuln-type: 'os,library'
  #        env:
  #          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #          AWS_DEFAULT_REGION: eu-west-1


   DeployToEKS:
      runs-on: ubuntu-latest
      needs: [PushtoECR]
      steps:
        - name: push to ecs/eks
          run: echo "pushing to eks or ecs"

   # this part need to pass it website link whether that is static or not depends on application but in this case will test a random app. 
   DAST: 
     runs-on: ubuntu-latest
     needs: [DeployToEKS]
     steps:
      - id: foo
        uses: kevinnika1/QualysWAS-Action@v1
        with:
          qualysuser: ${{ secrets.qualysuser }} #qualys username and password for the api access
          qualyspass: ${{ secrets.qualyspass }}
          website: 'webiste-you-are-scanning'
          project: 'project-name'
